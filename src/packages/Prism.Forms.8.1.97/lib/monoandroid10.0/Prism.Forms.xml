<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Forms</name>
    </assembly>
    <members>
        <member name="T:Prism.AppModel.ApplicationStore">
            <summary>
            Implementation of <see cref="T:Prism.AppModel.IApplicationStore"/>
            </summary>
        </member>
        <member name="P:Prism.AppModel.ApplicationStore.Properties">
            <summary>
            Getter for the current ApplicationStore properties
            <see cref="P:Prism.AppModel.IApplicationStore.Properties"/>
            </summary>
        </member>
        <member name="M:Prism.AppModel.ApplicationStore.SavePropertiesAsync">
            <summary>
            Asynchronously persists the Application.Properties dictionary for the application object.
            </summary>
            <returns>A task that represents the asynchronous save operation
            <see cref="M:Prism.AppModel.IApplicationStore.SavePropertiesAsync"/></returns>
        </member>
        <member name="T:Prism.AppModel.FlowDirection">
            <summary>
            Enumerates values that control the layout direction for views. This maps to
            the Xamarin.Forms.FlowDirection.
            </summary>
            <remarks>
            The following contains a few important points from Right-to-Left Localization.
            Developers should consult that document for more information about limitations
            of right-to-left support, and for requirements to implement right-to-left support
            on various target platforms.
            The default value of Xamarin.Forms.FlowDirection for a visual element that has
            no parent is Xamarin.Forms.FlowDirection.LeftToRight, even on platforms where
            Xamarin.Forms.Device.FlowDirection is Xamarin.Forms.FlowDirection.RightToLeft.
            Therefore, developers must deliberately opt in to right-to-left layout. Developers
            can choose right-to-left layout by setting the Xamarin.Forms.VisualElement.FlowDirection
            property of the root element to Xamarin.Forms.FlowDirection.RightToLeft to choose
            right-to-left layout, or to Xamarin.Forms.FlowDirection.MatchParent to match
            the device layout.
            </remarks>
        </member>
        <member name="F:Prism.AppModel.FlowDirection.MatchParent">
            <summary>
            Indicates that the view's layout direction will match the parent view's layout
            direction.
            </summary>
        </member>
        <member name="F:Prism.AppModel.FlowDirection.LeftToRight">
            <summary>
            Indicates that view will be laid out left to right. This is the default when
            the view has no parent.
            </summary>
        </member>
        <member name="F:Prism.AppModel.FlowDirection.RightToLeft">
            <summary>
            Indicates that view will be laid out right to left.
            </summary>
        </member>
        <member name="T:Prism.AppModel.IApplicationLifecycleAware">
            <summary>
            Interface to handle OS related events when Application is put to sleep, etc.
            </summary>
        </member>
        <member name="M:Prism.AppModel.IApplicationLifecycleAware.OnResume">
            <summary>
            Called when application is resumed
            </summary>
        </member>
        <member name="M:Prism.AppModel.IApplicationLifecycleAware.OnSleep">
            <summary>
            Called when application is put to sleep
            </summary>
        </member>
        <member name="T:Prism.AppModel.IApplicationStore">
            <summary>
            Interface for an Application Store to save/load properties of Application
            </summary>
        </member>
        <member name="P:Prism.AppModel.IApplicationStore.Properties">
            <summary>
            Getter for properties
            </summary>
        </member>
        <member name="M:Prism.AppModel.IApplicationStore.SavePropertiesAsync">
            <summary>
            Asynchronously persists the Application.Properties dictionary for the application object.
            </summary>
            <returns>A task that represents the asynchronous save operation
            <see cref="M:Prism.AppModel.IApplicationStore.SavePropertiesAsync"/></returns>
        </member>
        <member name="T:Prism.AppModel.IKeyboardMapper">
            <summary>
            An abstraction to map <see cref="T:Prism.AppModel.KeyboardType"/> to the <see cref="T:Xamarin.Forms.Keyboard"/>;
            </summary>
        </member>
        <member name="M:Prism.AppModel.IKeyboardMapper.Map(Prism.AppModel.KeyboardType)">
            <summary>
            Maps the <see cref="T:Prism.AppModel.KeyboardType"/> to a <see cref="T:Xamarin.Forms.Keyboard"/>
            </summary>
            <param name="keyboardType">The Keyboard type.</param>
            <returns>The <see cref="T:Xamarin.Forms.Keyboard"/>.</returns>
        </member>
        <member name="T:Prism.AppModel.KeyboardMapper">
            <summary>
            The default implementation of the <see cref="T:Prism.AppModel.IKeyboardMapper"/>.
            </summary>
        </member>
        <member name="M:Prism.AppModel.KeyboardMapper.Map(Prism.AppModel.KeyboardType)">
            <summary>
            Maps the <see cref="T:Prism.AppModel.KeyboardType"/> to a <see cref="T:Xamarin.Forms.Keyboard"/>
            </summary>
            <param name="keyboardType">The Keyboard type.</param>
            <returns>The <see cref="T:Xamarin.Forms.Keyboard"/>.</returns>
        </member>
        <member name="T:Prism.AppModel.KeyboardType">
            <summary>
            Keyboard type
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Chat">
            <summary>
            Gets an instance of type "ChatKeyboard".
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Default">
            <summary>
            Gets an instance of type "Keyboard".
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Email">
            <summary>
            Gets an instance of type "EmailKeyboard".
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Numeric">
            <summary>
            Gets an instance of type "NumericKeyboard".
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Plain">
            <summary>
            Returns a new keyboard with None Xamarin.Forms.KeyboardFlags.
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Telephone">
            <summary>
            Gets an instance of type "TelephoneKeyboard".
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Text">
            <summary>
            Gets an instance of type "TextKeyboard".
            </summary>
        </member>
        <member name="F:Prism.AppModel.KeyboardType.Url">
            <summary>
            Gets an instance of type "UrlKeyboard".
            </summary>
        </member>
        <member name="T:Prism.AppModel.RuntimePlatform">
            <summary>
            Represents the Platform (OS) that the application is running on.
            </summary>
            <remarks>This enum acts as a wrapper around the Device.RuntimePlatform string-based options</remarks>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.Android">
            <summary>
            Google Android
            </summary>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.GTK">
            <summary>
            GTK UI projects
            </summary>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.iOS">
            <summary>
            Apple IOS
            </summary>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.macOS">
            <summary>
            Apple macOS
            </summary>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.Tizen">
            <summary>
            Tizen OS
            </summary>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.UWP">
            <summary>
            Universal Windows Platform
            </summary>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.WPF">
            <summary>
            Windows Presentation Foundation
            </summary>
        </member>
        <member name="F:Prism.AppModel.RuntimePlatform.Unknown">
            <summary>
            Catchall for unlisted Platform
            </summary>
        </member>
        <member name="T:Prism.Behaviors.BehaviorBase`1">
            <summary>
            Base class that extends on Xamarin Forms Behaviors.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Prism.Behaviors.BehaviorBase`1.AssociatedObject">
            <summary>
            The Object associated with the Behavior
            </summary>
        </member>
        <member name="M:Prism.Behaviors.BehaviorBase`1.OnAttachedTo(`0)">
            <inheritDoc />
        </member>
        <member name="M:Prism.Behaviors.BehaviorBase`1.OnDetachingFrom(`0)">
            <inheritDoc />
        </member>
        <member name="M:Prism.Behaviors.BehaviorBase`1.OnBindingContextChanged">
            <inheritDoc />
        </member>
        <member name="T:Prism.Behaviors.EventToCommandBehavior">
            <summary>
            Behavior class that enable using <see cref="T:System.Windows.Input.ICommand" /> to react on events raised by <see cref="T:Xamarin.Forms.BindableObject" /> bindable.
            </summary>
            <para>
            There are multiple ways to pass a parameter to the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> method. 
            Setting the <see cref="P:Prism.Behaviors.EventToCommandBehavior.CommandParameter"/> will always result in that value will be sent.
            The <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsParameterPath"/> will walk the property path on the instance of <see cref="T:System.EventArgs"/> for the event and, if any property found, pass that parameter.
            The <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter"/> will call the <see cref="M:Xamarin.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method with the <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterParameter"/> and pass the result as parameter.
            </para>
            <para>
            The order of evaluation for the parameter to be sent to the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> method is
            1. <see cref="P:Prism.Behaviors.EventToCommandBehavior.CommandParameter"/>
            2. <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsParameterPath"/>
            3. <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter"/>
            and as soon as a non-<c>null</c> value is found, the evaluation is stopped.
            </para>
            <example>
            &lt;ListView&gt;
            &lt;ListView.Behaviors&gt;
            &lt;behaviors:EventToCommandBehavior EventName="ItemTapped" Command={Binding ItemTappedCommand} /&gt;
            &lt;/ListView.Behaviors&gt;
            &lt;/ListView&gt;
            </example>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior.EventNameProperty">
            <summary>
            Bindable property for Name of the event that will be forwarded to 
            <see cref="P:Prism.Behaviors.EventToCommandBehavior.Command"/>
            </summary>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior.CommandProperty">
            <summary>
            Bindable property for Command to execute
            </summary>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior.CommandParameterProperty">
            <summary>
            Bindable property for Argument sent to <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterProperty">
            <summary>
            Bindable property to set instance of <see cref="T:Xamarin.Forms.IValueConverter" /> to convert the <see cref="T:System.EventArgs" /> for <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventName" />
            </summary>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterParameterProperty">
            <summary>
            Bindable property to set Argument passed as parameter to <see cref="M:Xamarin.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
            </summary>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior.EventArgsParameterPathProperty">
            <summary>
            Bindable property to set Parameter path to extract property from <see cref="T:System.EventArgs"/> instance to pass to <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior._eventInfo">
            <summary>
            <see cref="T:System.Reflection.EventInfo"/>
            </summary>
        </member>
        <member name="F:Prism.Behaviors.EventToCommandBehavior._handler">
            <summary>
            Delegate to Invoke when event is raised
            </summary>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventArgsParameterPath">
            <summary>
            Parameter path to extract property from <see cref="T:System.EventArgs"/> instance to pass to <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventName">
            <summary>
            Name of the event that will be forwarded to <see cref="P:Prism.Behaviors.EventToCommandBehavior.Command" />
            </summary>
            <remarks>
            An event that is invalid for the attached <see cref="T:Xamarin.Forms.View" /> will result in <see cref="T:System.ArgumentException" /> thrown.
            </remarks>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.Command">
            <summary>
            The command to execute
            </summary>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.CommandParameter">
            <summary>
            Argument sent to <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />
            </summary>
            <para>
            If <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter" /> and <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterParameter" /> is set then the result of the
            conversion
            will be sent.
            </para>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter">
            <summary>
            Instance of <see cref="T:Xamarin.Forms.IValueConverter" /> to convert the <see cref="T:System.EventArgs" /> for <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventName" />
            </summary>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterParameter">
            <summary>
            Argument passed as parameter to <see cref="M:Xamarin.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
            </summary>
        </member>
        <member name="M:Prism.Behaviors.EventToCommandBehavior.OnAttachedTo(Xamarin.Forms.BindableObject)">
            <summary>
            Subscribes to the event <see cref="T:Xamarin.Forms.BindableObject"/> object
            </summary>
            <param name="bindable">Bindable object that is source of event to Attach</param>
            <exception cref="T:System.ArgumentException">Thrown if no matching event exists on 
            <see cref="T:Xamarin.Forms.BindableObject"/></exception>
        </member>
        <member name="M:Prism.Behaviors.EventToCommandBehavior.OnDetachingFrom(Xamarin.Forms.BindableObject)">
            <summary>
            Unsubscribes from the event on <paramref name="bindable"/>
            </summary>
            <param name="bindable"><see cref="T:Xamarin.Forms.BindableObject"/> that is source of event</param>
        </member>
        <member name="M:Prism.Behaviors.EventToCommandBehavior.OnEventRaised(System.Object,System.EventArgs)">
            <summary>
            Method called when event is raised
            </summary>
            <param name="sender">Source of that raised the event</param>
            <param name="eventArgs">Arguments of the raised event</param>
        </member>
        <member name="T:Prism.Behaviors.IPageBehaviorFactory">
            <summary>
            Applies behaviors to the Xamarin.Forms pages when they are created during navigation.
            </summary>
        </member>
        <member name="M:Prism.Behaviors.IPageBehaviorFactory.ApplyPageBehaviors(Xamarin.Forms.Page)">
            <summary>
            Applies behaviors to a page based on the page type.
            </summary>
            <param name="page">The page to apply the behaviors</param>
            <remarks>The PageLifeCycleAwareBehavior is applied to all pages</remarks>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.OnAttachedTo(Xamarin.Forms.MultiPage{`0})">
            <inheritDoc/>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.OnDetachingFrom(Xamarin.Forms.MultiPage{`0})">
            <inheritDoc/>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.CurrentPageChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Event Handler for the MultiPage CurrentPageChanged event
            </summary>
            <param name="sender">The MultiPage</param>
            <param name="e">Event Args</param>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.RootPageAppearingHandler(System.Object,System.EventArgs)">
            <summary>
            Event Handler for the MultiPage Appearing event
            </summary>
            <param name="sender">The MultiPage Appearing</param>
            <param name="e">Event Args</param>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.RootPageDisappearingHandler(System.Object,System.EventArgs)">
            <summary>
            Event Handler for the MultiPage Disappearing event
            </summary>
            <param name="sender">The MultiPage Disappearing</param>
            <param name="e">Event Args</param>
        </member>
        <member name="T:Prism.Behaviors.PageBehaviorFactory">
            <summary>
            Applies behaviors to the Xamarin.Forms pages when they are created during navigation.
            </summary>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyCarouselPageBehaviors(Xamarin.Forms.CarouselPage)">
            <summary>
            Applies behaviors to a <see cref="T:Xamarin.Forms.CarouselPage" />.
            </summary>
            <param name="page">The CarouselPage to apply the behaviors</param>
            <remarks>The CarouselPageActiveAwareBehavior is applied by default</remarks>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyContentPageBehaviors(Xamarin.Forms.ContentPage)">
            <summary>
            Applies behaviors to a <see cref="T:Xamarin.Forms.ContentPage" />.
            </summary>
            <param name="page">The ContentPage to apply the behaviors</param>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyMasterDetailPageBehaviors(Xamarin.Forms.MasterDetailPage)">
            <summary>
            Applies behaviors to a MasterDetailPage.
            </summary>
            <param name="page">The MasterDetailPage to apply the behaviors</param>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyFlyoutPageBehaviors(Xamarin.Forms.FlyoutPage)">
            <summary>
            Applies behaviors to a <see cref="T:Xamarin.Forms.FlyoutPage" />
            </summary>
            <param name="page">The <see cref="T:Xamarin.Forms.FlyoutPage" /> to apply the behaviors.</param>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyNavigationPageBehaviors(Xamarin.Forms.NavigationPage)">
            <summary>
            Applies behaviors to a <see cref="T:Xamarin.Forms.NavigationPage" />.
            </summary>
            <param name="page">The <see cref="T:Xamarin.Forms.NavigationPage" /> to apply the behaviors</param>
            <remarks>The NavigationPageSystemGoBackBehavior and NavigationPageActiveAwareBehavior are applied by default</remarks>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyPageBehaviors(Xamarin.Forms.Page)">
            <summary>
            Applies behaviors to a page based on the <see cref="T:Xamarin.Forms.Page" /> type.
            </summary>
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> to apply the behaviors.</param>
            <remarks>
            There is no need to call base.ApplyPageBehaviors when overriding.
            All Prism behaviors have already been applied.
            </remarks>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyTabbedPageBehaviors(Xamarin.Forms.TabbedPage)">
            <summary>
            Applies behaviors to a TabbedPage.
            </summary>
            <param name="page">The TabbedPage to apply the behaviors</param>
            <remarks>The TabbedPageActiveAwareBehavior is added by default</remarks>
        </member>
        <member name="T:Prism.Behaviors.PageScopeBehavior">
            <summary>
            Controls the Page container Scope
            </summary>
        </member>
        <member name="T:Prism.Common.ApplicationProvider">
            <summary>
            Provides Application components.
            </summary>
        </member>
        <member name="P:Prism.Common.ApplicationProvider.MainPage">
            <inheritdoc/>
        </member>
        <member name="T:Prism.Common.IApplicationProvider">
            <summary>
            Defines a contract for providing Application components.
            </summary>
        </member>
        <member name="P:Prism.Common.IApplicationProvider.MainPage">
            <summary>
            Gets or sets the main page of the Application.
            </summary>
        </member>
        <member name="T:Prism.Common.IPageAware">
            <summary>
            Interface to signify that a class must have knowledge of a specific <see cref="T:Xamarin.Forms.Page"/> instance in order to function properly.
            </summary>
        </member>
        <member name="P:Prism.Common.IPageAware.Page">
            <summary>
            The <see cref="T:Xamarin.Forms.Page"/> instance.
            </summary>
        </member>
        <member name="M:Prism.Common.PageUtilities.SetAutowireViewModel(Xamarin.Forms.VisualElement)">
            <summary>
            Sets the AutowireViewModel property on the View to <c>true</c> if there is currently
            no BindingContext and the AutowireViewModel property has not been set.
            </summary>
            <param name="element">The View typically a <see cref="T:Xamarin.Forms.Page"/> or <see cref="T:Xamarin.Forms.View"/>.</param>
        </member>
        <member name="T:Prism.Common.UriParsingHelper">
            <summary>
            Helper class for parsing <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="T:Prism.Ioc.ContainerProvider`1">
             <summary>
             Provides Types and Services registered with the Container
             </summary>
             <typeparam name="T">The type to Resolve</typeparam>
             <example>
             We can use this to build better types such as ValueConverters with full dependency injection
             <code>
             public class MyValueConverter : IValueConverter
             {
                 private ILoggerFacade _logger { get; }
                 public MyValueConverter(ILoggerFacade logger)
                 {
                     _logger = logger;
                 }
            
                 public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
                 {
                     _logger.Log($"Converting {value.GetType().Name} to {targetType.Name}", Category.Debug, Priority.None);
                     // do stuff
                 }
            
                 public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
                 {
                     _logger.Log($"Converting back from {value.GetType().Name} to {targetType.Name}", Category.Debug, Priority.None);
                     return null;
                 }
             }
             </code>
             We can then simply use our ValueConverter or other class directly in XAML
             <![CDATA[
             <ContentPage xmlns:prism="clr-namespace:Prism.Ioc;assembly=Prism.Forms">
                 <ContentPage.Resources>
                     <ResourceDictionary>
                         <prism:ContainerProvider x:TypeArguments="MyValueConverter" x:Key="myValueConverter" />
                     <ResourceDictionary>
                 <ContentPage.Resources>
                 <Label Text="{Binding SomeProp,Converter={StaticResource myValueConverter}}" />
             </ContentPage>
             ]]>
             </example>
        </member>
        <member name="P:Prism.Ioc.ContainerProvider`1.Name">
            <summary>
            The Name used to register the type with the Container
            </summary>
        </member>
        <member name="M:Prism.Ioc.ContainerProvider`1.op_Implicit(Prism.Ioc.ContainerProvider{`0})~`0">
            <summary>
            Resolves the specified type from the Application's Container
            </summary>
            <param name="containerProvider"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``1(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation(Prism.Ioc.IContainerRegistry,System.Type,System.String)">
            <summary>
            Registers a Page for navigation
            </summary>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="viewType">The type of Page to register</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``2(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <typeparam name="TViewModel">The ViewModel to use as the BindingContext for the Page</typeparam>
            <param name="name">The unique name to register with the Page</param>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation(Prism.Ioc.IContainerRegistry,System.Type,System.Type,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <param name="viewType">The Type of Page to register</param>
            <param name="viewModelType">The Type of ViewModel to use as the BindingContext for the Page</param>
            <param name="name">The unique name to register with the Page</param>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnPlatform``2(Prism.Ioc.IContainerRegistry,System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="androidView">Android Specific View Type</param>
            <param name="iOSView">iOS Specific View Type</param>
            <param name="otherView">Other Platform Specific View Type</param>
            <param name="windowsView">Windows Specific View Type</param>
            <param name="winPhoneView">Windows Phone Specific View Type</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnPlatform``2(Prism.Ioc.IContainerRegistry,Prism.IPlatform[])">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="platforms"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnPlatform``2(Prism.Ioc.IContainerRegistry,System.String,Prism.IPlatform[])">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page. If left empty or null will default to the View name.</param>
            <param name="platforms"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnIdiom``2(Prism.Ioc.IContainerRegistry,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the Device Idiom using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be used across multiple Idioms if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">The shared ViewModel</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The common name used for Navigation. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="desktopView">Desktop Specific View Type</param>
            <param name="tabletView">Tablet Specific View Type</param>
            <param name="phoneView">Phone Specific View Type</param>
        </member>
        <member name="T:Prism.Ioc.IResolverOverridesHelper">
            <summary>
            Provides a helper interface for Regions to be able to inject the current Region
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalogExtensions">
            <summary>
            <see cref="T:Prism.Modularity.IModuleCatalog"/>  extensions.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode)">
            <summary>
            Adds the module.
            </summary>
            <returns>The module.</returns>
            <param name="catalog">Catalog</param>
            <param name="mode"><see cref="T:Prism.Modularity.InitializationMode"/></param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Adds the module.
            </summary>
            <returns>The module.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,Prism.Modularity.InitializationMode)">
            <summary>
            Adds the module.
            </summary>
            <returns>The module.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
            <param name="mode"><see cref="T:Prism.Modularity.IModule"/>.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String[])">
            <summary>
            Adds the <see cref="T:Prism.Modularity.IModule"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:Prism.Modularity.IModule"/></typeparam>
            <param name="catalog">The <see cref="T:Prism.Modularity.IModuleCatalog"/> to add the <see cref="T:Prism.Modularity.IModule"/> to.</param>
            <param name="dependsOn">The names of the <see cref="T:Prism.Modularity.IModule"/>'s that should be loaded when this <see cref="T:Prism.Modularity.IModule"/> is loaded.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,System.String[])">
            <summary>
            Adds the <see cref="T:Prism.Modularity.IModule"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:Prism.Modularity.IModule"/></typeparam>
            <param name="catalog">The <see cref="T:Prism.Modularity.IModuleCatalog"/> to add the <see cref="T:Prism.Modularity.IModule"/> to.</param>
            <param name="name">The name of the <see cref="T:Prism.Modularity.IModule"/></param>
            <param name="dependsOn">The names of the <see cref="T:Prism.Modularity.IModule"/>'s that should be loaded when this <see cref="T:Prism.Modularity.IModule"/> is loaded.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds the <see cref="T:Prism.Modularity.IModule"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:Prism.Modularity.IModule"/></typeparam>
            <param name="catalog">The <see cref="T:Prism.Modularity.IModuleCatalog"/> to add the <see cref="T:Prism.Modularity.IModule"/> to.</param>
            <param name="mode"></param>
            <param name="dependsOn">The names of the <see cref="T:Prism.Modularity.IModule"/>'s that should be loaded when this <see cref="T:Prism.Modularity.IModule"/> is loaded.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds the <see cref="T:Prism.Modularity.IModule"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:Prism.Modularity.IModule"/></typeparam>
            <param name="catalog">The <see cref="T:Prism.Modularity.IModuleCatalog"/> to add the <see cref="T:Prism.Modularity.IModule"/> to.</param>
            <param name="name">The name of the <see cref="T:Prism.Modularity.IModule"/></param>
            <param name="mode">The <see cref="T:Prism.Modularity.InitializationMode"/></param>
            <param name="dependsOn">The names of the <see cref="T:Prism.Modularity.IModule"/>'s that should be loaded when this <see cref="T:Prism.Modularity.IModule"/> is loaded.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/></returns>
        </member>
        <member name="T:Prism.Modularity.ModuleCatalog">
            <summary>
            The <see cref="T:Prism.Modularity.ModuleCatalog"/> holds information about the modules that can be used by the 
            application. Each module is described in a <see cref="T:Prism.Modularity.ModuleInfo"/> class, that records the 
            name and type of the module. 
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleInfo">
            <summary>
            Defines the metadata that describes a module.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor">
            <summary>
            Initializes a new empty instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="name">The module's name.</param>
            <param name="type">The module <see cref="T:System.Type"/>'s AssemblyQualifiedName.</param>
            <param name="dependsOn">The modules this instance depends on.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="dependsOn"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="name">The module's name.</param>
            <param name="type">The module's type.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type,System.String,Prism.Modularity.InitializationMode)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
            <param name="initializationMode">The module's <see cref="P:Prism.Modularity.ModuleInfo.InitializationMode"/>.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.ModuleType">
            <summary>
            Gets or sets the module <see cref="T:System.Type"/>'s AssemblyQualifiedName.
            </summary>
            <value>The type of the module.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.DependsOn">
            <summary>
            Gets or sets the list of modules that this module depends upon.
            </summary>
            <value>The list of modules that this module depends upon.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.InitializationMode">
            <summary>
            Specifies on which stage the Module will be initialized.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.Prism#Modularity#IModuleInfo#Ref">
            <summary>
            Reference to the location of the module assembly. Not Supported by Xamarin.Forms
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.State">
            <summary>
            Gets or sets the state of the <see cref="T:Prism.Modularity.ModuleInfo"/> with regards to the module loading and initialization process.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.Prism#Modularity#IModuleInfo#State">
            <summary>
            Gets or sets the state of the <see cref="T:Prism.Modularity.ModuleInfo"/> with regards to the module loading and initialization process.
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleManager">
            <summary>
            Component responsible for coordinating the modules' type loading and module initialization process. 
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.ModuleCatalog">
            <summary>
            The module catalog.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="E:Prism.Modularity.ModuleManager.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="E:Prism.Modularity.ModuleManager.ModuleDownloadProgressChanged">
            <summary>
            Not used by Prism.Forms
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.ModuleInitializer">
            <summary>
            The module initializer.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.#ctor(Prism.Modularity.IModuleInitializer,Prism.Modularity.IModuleCatalog)">
            <summary>
            Initializes an instance of the <see cref="T:Prism.Modularity.ModuleManager"/> class.
            </summary>
            <param name="moduleInitializer">Service used for initialization of modules.</param>
            <param name="moduleCatalog">Catalog that enumerates the modules to be loaded and initialized.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.Run">
            <summary>
            Initializes the modules marked as <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/> in the <see cref="P:Prism.Modularity.ModuleManager.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module in the <see cref="T:Prism.Modularity.IModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModulesWhenAvailable">
            <summary>
            Loads the <see cref="T:Prism.Modularity.IModule"/>'s with <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/>
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModules(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Loads the specified modules.
            </summary>
            <param name="moduleInfos"><see cref="T:Prism.Modularity.IModuleInfo"/>.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.RaiseLoadModuleCompleted(Prism.Modularity.IModuleInfo,System.Exception)">
            <summary>
            Raises the <see cref="E:Prism.Modularity.ModuleManager.LoadModuleCompleted"/> event.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> that was just loaded.</param>
            <param name="ex">An <see cref="T:System.Exception"/> if any that was thrown during the loading of the <see cref="T:Prism.Modularity.IModule"/></param>
        </member>
        <member name="T:Prism.Mvvm.ViewModelLocator">
            <summary>
            This class defines the attached property and related change handler that calls the <see cref="T:Prism.Mvvm.ViewModelLocationProvider"/>.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocator.AutowireViewModelProperty">
            <summary>
            Instructs Prism whether or not to automatically create an instance of a ViewModel using a convention, and assign the associated View's <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> to that instance.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.GetAutowireViewModel(Xamarin.Forms.BindableObject)">
            <summary>
            Gets the AutowireViewModel property value.
            </summary>
            <param name="bindable"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.SetAutowireViewModel(Xamarin.Forms.BindableObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the AutowireViewModel property value.  If <c>true</c>, creates an instance of a ViewModel using a convention, and sets the associated View's <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> to that instance.
            </summary>
            <param name="bindable"></param>
            <param name="value"></param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.Bind(System.Object,System.Object)">
            <summary>
            Sets the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> of a View
            </summary>
            <param name="view">The View to set the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> on</param>
            <param name="viewModel">The object to use as the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> for the View</param>
        </member>
        <member name="T:Prism.Navigation.IConfirmNavigation">
            <summary>
            Provides a way for ViewModels involved in navigation to determine if a navigation request should continue.
            </summary>
        </member>
        <member name="M:Prism.Navigation.IConfirmNavigation.CanNavigate(Prism.Navigation.INavigationParameters)">
            <summary>
            Determines whether this instance accepts being navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
            <returns><c>True</c> if navigation can continue, <c>False</c> if navigation is not allowed to continue</returns>
        </member>
        <member name="T:Prism.Navigation.IConfirmNavigationAsync">
            <summary>
            Provides a way for ViewModels involved in navigation to asynchronously determine if a navigation request should continue.
            </summary>
        </member>
        <member name="M:Prism.Navigation.IConfirmNavigationAsync.CanNavigateAsync(Prism.Navigation.INavigationParameters)">
            <summary>
            Determines whether this instance accepts being navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
            <returns><c>True</c> if navigation can continue, <c>False</c> if navigation is not allowed to continue</returns>
        </member>
        <member name="T:Prism.Navigation.IFlyoutPageOptions">
            <summary>
            Provides a way for the <see cref="T:Prism.Navigation.INavigationService" /> to know whether the Flyout should be presented after navigation.
            </summary>
        </member>
        <member name="P:Prism.Navigation.IFlyoutPageOptions.IsPresentedAfterNavigation">
            <summary>
            The INavigationService uses the result of this property to determine if the FlyoutPage.Flyout should be presented after navigation.
            </summary>
        </member>
        <member name="T:Prism.Navigation.IMasterDetailPageOptions">
            <summary>
            Provides a way for the INavigationService to make decisions regarding a MasterDetailPage during navigation.
            </summary>
        </member>
        <member name="T:Prism.Navigation.INavigatedAware">
            <summary>
            Provides a way for ViewModels involved in navigation to be notified of navigation activities after the target Page has been added to the navigation stack.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigatedAware.OnNavigatedFrom(Prism.Navigation.INavigationParameters)">
            <summary>
            Called when the implementer has been navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
        <member name="M:Prism.Navigation.INavigatedAware.OnNavigatedTo(Prism.Navigation.INavigationParameters)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
        <member name="T:Prism.Navigation.INavigatingAware">
            <summary>
            Provides a way for ViewModels involved in navigation to be notified of navigation activities prior to the target Page being added to the navigation stack.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigatingAware.OnNavigatingTo(Prism.Navigation.INavigationParameters)">
            <summary>
            Called before the implementor has been navigated to.
            </summary>
            <param name="parameters">The navigation parameters.</param>
            <remarks>Not called when using device hardware or software back buttons</remarks>
        </member>
        <member name="T:Prism.Navigation.INavigationAware">
            <summary>
            Provides a way for ViewModels involved in navigation to be notified of navigation activities.
            </summary>
        </member>
        <member name="T:Prism.Navigation.INavigationPageOptions">
            <summary>
            Provides a way for the INavigationService to make decisions regarding a NavigationPage during navigation.
            </summary>
        </member>
        <member name="P:Prism.Navigation.INavigationPageOptions.ClearNavigationStackOnNavigation">
            <summary>
            The INavigationService uses the result of this property to determine if the NavigationPage should clear the NavigationStack when navigating to a new Page.
            </summary>
            <remarks>This is equivalent to calling PopToRoot, and then replacing the current Page with the target Page being navigated to.</remarks>
        </member>
        <member name="T:Prism.Navigation.INavigationParameters">
            <summary>
            Provides a way for the <see cref="T:Prism.Navigation.INavigationService"/> to pass parameters during navigation.
            </summary>
        </member>
        <member name="T:Prism.Navigation.INavigationParametersInternal">
            <summary>
            Used to set internal parameters used by Prism's <see cref="T:Prism.Navigation.INavigationService"/>
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigationParametersInternal.Add(System.String,System.Object)">
            <summary>
            Adds the key and value to the parameters Collection
            </summary>
            <param name="key">The key to reference this value in the parameters collection.</param>
            <param name="value">The value of the parameter to store</param>
        </member>
        <member name="M:Prism.Navigation.INavigationParametersInternal.ContainsKey(System.String)">
            <summary>
            Checks collection for presence of key
            </summary>
            <param name="key">The key to check in the Collection</param>
            <returns><c>true</c> if key exists; else returns <c>false</c>.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationParametersInternal.GetValue``1(System.String)">
            <summary>
            Returns the value of the member referenced by key
            </summary>
            <typeparam name="T">The type of object to be returned</typeparam>
            <param name="key">The key for the value to be returned</param>
            <returns>Returns a matching parameter of <typeparamref name="T"/> if one exists in the Collection</returns>
        </member>
        <member name="T:Prism.Navigation.INavigationService">
            <summary>
            Provides page based navigation for ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigationService.GoBackAsync">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationService.GoBackAsync(Prism.Navigation.INavigationParameters)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationService.GoBackAsync(Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationService.GoBackToRootAsync(Prism.Navigation.INavigationParameters)">
            <summary>
            When navigating inside a NavigationPage: Pops all but the root Page off the navigation stack
            </summary>
            <param name="parameters">The navigation parameters</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Only works when called from a View within a NavigationPage</remarks>
        </member>
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.Uri)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to navigate to</param>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource));
            </example>
        </member>
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.Uri,Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource), parameters);
            </example>
        </member>
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.String)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
        </member>
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.String,Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
        </member>
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.String,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PushModalAsync, if <c>false</c> uses PushAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.Uri,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource), parameters);
            </example>
        </member>
        <member name="T:Prism.Navigation.INavigationServiceExtensions">
            <summary>
            Common extensions for the <see cref="T:Prism.Navigation.INavigationService"/>
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.OnNavigationError(System.Threading.Tasks.Task{Prism.Navigation.INavigationResult},System.Action{System.Exception})">
            <summary>
            Provides an easy to use way to provide an Error Callback without using await NavigationService
            </summary>
            <param name="navigationTask">The current Navigation Task</param>
            <param name="errorCallback">The <see cref="T:System.Exception"/> handler</param>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.GoBackToRootAsync(Prism.Navigation.INavigationService,Prism.Navigation.INavigationParameters)">
            <summary>
            When navigating inside a NavigationPage: Pops all but the root Page off the navigation stack
            </summary>
            <param name="navigationService">The INavigationService instance</param>
            <param name="parameters">The navigation parameters</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Only works when called from a View within a NavigationPage</remarks>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.GetNavigationUriPath(Prism.Navigation.INavigationService)">
            <summary>
            Gets an absolute path of the current page as it relates to it's position in the navigation stack.
            </summary>
            <returns>The absolute path of the current Page</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.GoBackAsync(Prism.Navigation.INavigationService,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="navigationService">Service for handling navigation between views</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.NavigateAsync(Prism.Navigation.INavigationService,System.String,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="navigationService">Service for handling navigation between views</param>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PushModalAsync, if <c>false</c> uses PushAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.GoBackAsync(Prism.Navigation.INavigationService,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="navigationService">Service for handling navigation between views</param>
            <param name="parameters">The navigation parameters</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.NavigateAsync(Prism.Navigation.INavigationService,System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="navigationService">Service for handling navigation between views</param>
            <param name="name">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            NavigateAsync("MainPage?id=3&amp;name=dan", ("person", person), ("foo", bar));
            </example>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.NavigateAsync(Prism.Navigation.INavigationService,System.Uri,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="navigationService">Service for handling navigation between views</param>
            <param name="uri">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource), parameters);
            </example>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.NavigateAsync(Prism.Navigation.INavigationService,System.Uri,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="navigationService">Service for handling navigation between views</param>
            <param name="uri">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=dan", UriKind.RelativeSource), ("person", person), ("foo", bar));
            </example>
        </member>
        <member name="F:Prism.Navigation.KnownNavigationParameters.CreateTab">
            <summary>
            Used to dynamically create a Page that will be used as a Tab when navigating to a TabbedPage.
            </summary>
        </member>
        <member name="F:Prism.Navigation.KnownNavigationParameters.SelectedTab">
            <summary>
            Used to select an existing Tab when navigating to a TabbedPage.
            </summary>
        </member>
        <member name="F:Prism.Navigation.KnownNavigationParameters.UseModalNavigation">
            <summary>
            Used to control the navigation stack. If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync.
            </summary>
        </member>
        <member name="F:Prism.Navigation.KnownNavigationParameters.XamlParam">
            <summary>
            Used to define a navigation parameter that is bound directly to a CommandParameter via <code>{Binding .}</code>.
            </summary>
        </member>
        <member name="T:Prism.Navigation.NavigationMode">
            <summary>
            The NavigationMode provides information about the navigation operation that has been invoked.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationMode.Back">
            <summary>
            Indicates that a navigation operation occured that resulted in navigating backwards in the navigation stack.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationMode.New">
            <summary>
            Indicates that a new navigation operation has occured and a new page has been added to the navigation stack.
            </summary>
        </member>
        <member name="T:Prism.Navigation.NavigationParameters">
            <summary>
            Represents Navigation parameters.
            </summary>
            <remarks>
            This class can be used to to pass object parameters during Navigation. 
            </remarks>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class.
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class with a query string.
            </summary>
            <param name="query">The query string.</param>
        </member>
        <member name="T:Prism.Navigation.PageNavigationService">
            <summary>
            Provides page based navigation for ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.#ctor(Prism.Ioc.IContainerProvider,Prism.Common.IApplicationProvider,Prism.Behaviors.IPageBehaviorFactory)">
            <summary>
            Constructs a new instance of the <see cref="T:Prism.Navigation.PageNavigationService"/>.
            </summary>
            <param name="container">The <see cref="T:Prism.Ioc.IContainerProvider"/> that will be used to resolve pages for navigation.</param>
            <param name="applicationProvider">The <see cref="T:Prism.Common.IApplicationProvider"/> that will let us ensure the Application.MainPage is set.</param>
            <param name="pageBehaviorFactory">The <see cref="T:Prism.Behaviors.IPageBehaviorFactory"/> that will apply base and custom behaviors to pages created in the <see cref="T:Prism.Navigation.PageNavigationService"/>.</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackAsync">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackAsync(Prism.Navigation.INavigationParameters)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackAsync(Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackInternal(Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackToRootAsync(Prism.Navigation.INavigationParameters)">
            <summary>
            When navigating inside a NavigationPage: Pops all but the root Page off the navigation stack
            </summary>
            <param name="parameters">The navigation parameters</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Only works when called from a View within a NavigationPage</remarks>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackToRootInternal(Prism.Navigation.INavigationParameters)">
            <summary>
            When navigating inside a NavigationPage: Pops all but the root Page off the navigation stack
            </summary>
            <param name="parameters">The navigation parameters</param>
            <remarks>Only works when called from a View within a NavigationPage</remarks>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.String)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.String,Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.String,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PushModalAsync, if <c>false</c> uses PushAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateInternal(System.String,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.Uri)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to navigate to</param>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource));
            </example>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.Uri,Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource), parameters);
            </example>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.Uri,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns><see cref="T:Prism.Navigation.INavigationResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            NavigateAsync(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource), parameters);
            </example>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateInternal(System.Uri,Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to navigate to</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <remarks>Navigation parameters can be provided in the Uri and by using the <paramref name="parameters"/>.</remarks>
            <example>
            Navigate(new Uri("MainPage?id=3&amp;name=brian", UriKind.RelativeSource), parameters);
            </example>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.ProcessNavigation(Xamarin.Forms.Page,System.Collections.Generic.Queue{System.String},Prism.Navigation.INavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Processes the Navigation for the Queued navigation segments
            </summary>
            <param name="currentPage">The Current <see cref="T:Xamarin.Forms.Page"/> that we are navigating from.</param>
            <param name="segments">The Navigation <see cref="T:System.Uri"/> segments.</param>
            <param name="parameters">The <see cref="T:Prism.Navigation.INavigationParameters"/>.</param>
            <param name="useModalNavigation"><see cref="T:System.Nullable`1"/> flag if we should force Modal Navigation.</param>
            <param name="animated">If <c>true</c>, the navigation will be animated.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.SetNavigationServiceForPage(Xamarin.Forms.Page)">
            <summary>
            Ensures that the <see cref="T:Xamarin.Forms.Page"/> has an attached <see cref="T:Prism.Ioc.IScopedProvider"/> and <see cref="T:Prism.Navigation.INavigationService"/>
            that can be more easily reused.
            </summary>
            <param name="page">The <see cref="T:Xamarin.Forms.Page"/> the <see cref="T:Prism.Navigation.INavigationService"/> instance will be created for.</param>
            <returns>The <see cref="T:Xamarin.Forms.Page"/></returns>
        </member>
        <member name="M:Prism.Navigation.TabbedPages.INavigationServiceExtensions.SelectTabAsync(Prism.Navigation.INavigationService,System.String,Prism.Navigation.INavigationParameters)">
            <summary>
            Selects a Tab of the TabbedPage parent.
            </summary>
            <param name="navigationService">Service for handling navigation between views</param>
            <param name="name">The name of the tab to select</param>
            <param name="parameters">The navigation parameters</param>
        </member>
        <member name="T:Prism.Navigation.Xaml.Navigation">
            <summary>
            Provides Attachable properties for Navigation
            </summary>
        </member>
        <member name="F:Prism.Navigation.Xaml.Navigation.CanNavigateProperty">
            <summary>
            Provides bindable CanNavigate Bindable Property
            </summary>
        </member>
        <member name="M:Prism.Navigation.Xaml.Navigation.GetCanNavigate(Xamarin.Forms.BindableObject)">
            <summary>
            Gets the Bindable Can Navigate property for an element
            </summary>
            <param name="view">The bindable element</param>
        </member>
        <member name="M:Prism.Navigation.Xaml.Navigation.SetCanNavigate(Xamarin.Forms.BindableObject,System.Boolean)">
            <summary>
            Sets the Bindable Can Navigate property for an element
            </summary>
            <param name="view">The bindable element</param>
            <param name="value">The Can Navigate value</param>
        </member>
        <member name="M:Prism.Navigation.Xaml.Navigation.GetNavigationService(Xamarin.Forms.Page)">
            <summary>
            Gets the instance of <see cref="T:Prism.Navigation.INavigationService"/> for the given <see cref="T:Xamarin.Forms.Page"/>
            </summary>
            <param name="page">The <see cref="T:Xamarin.Forms.Page"/></param>
            <returns>The <see cref="T:Prism.Navigation.INavigationService"/></returns>
            <remarks>Do not use... this is an internal use API</remarks>
        </member>
        <member name="T:Prism.PrismApplicationBase">
            <summary>
            The Base implementation for a PrismApplication
            </summary>
        </member>
        <member name="P:Prism.PrismApplicationBase.Current">
            <summary>
            Gets the Current PrismApplication
            </summary>
        </member>
        <member name="F:Prism.PrismApplicationBase.NavigationServiceName">
            <summary>
            The registration name to create a new transient instance of the <see cref="T:Prism.Navigation.INavigationService"/>
            </summary>
        </member>
        <member name="P:Prism.PrismApplicationBase.Container">
            <summary>
            The dependency injection container used to resolve objects
            </summary>
        </member>
        <member name="P:Prism.PrismApplicationBase.NavigationService">
            <summary>
            Gets the <see cref="T:Prism.Navigation.INavigationService"/> for the application.
            </summary>
        </member>
        <member name="P:Prism.PrismApplicationBase.PlatformInitializer">
            <summary>
            Get the Platform Initializer
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.PrismApplicationBase" /> using the default constructor
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.#ctor(Prism.IPlatformInitializer)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.PrismApplicationBase" /> with a <see cref="T:Prism.IPlatformInitializer" />.
            Used when there are specific types that need to be registered on the platform.
            </summary>
            <param name="platformInitializer">The <see cref="T:Prism.IPlatformInitializer"/>.</param>
        </member>
        <member name="M:Prism.PrismApplicationBase.#ctor(Prism.IPlatformInitializer,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.PrismApplicationBase" /> with a <see cref="T:Prism.IPlatformInitializer" />.
            Used when there are specific types that need to be registered on the platform.
            Also determines whether to set the <see cref="T:Xamarin.Forms.Internals.DependencyResolver" /> for resolving Renderers and Platform Effects.
            </summary>
            <param name="platformInitializer">The <see cref="T:Prism.IPlatformInitializer"/>.</param>
            <param name="setFormsDependencyResolver">Should <see cref="T:Prism.PrismApplicationBase" /> set the <see cref="T:Xamarin.Forms.Internals.DependencyResolver" />.</param>
        </member>
        <member name="M:Prism.PrismApplicationBase.InitializeInternal">
            <summary>
            Run the initialization process.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureViewModelLocator">
            <summary>
            Configures the <see cref="T:Prism.Mvvm.ViewModelLocator"/> used by Prism.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.Initialize">
            <summary>
            Run the bootstrapper process.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.CreateContainerExtension">
            <summary>
            Creates the container used by Prism.
            </summary>
            <returns>The container</returns>
        </member>
        <member name="M:Prism.PrismApplicationBase.RegisterRequiredTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers all types that are required by Prism to function with the container.
            </summary>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.PrismApplicationBase.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureModuleCatalog(Prism.Modularity.IModuleCatalog)">
            <summary>
            Configures the <see cref="T:Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
            <param name="moduleCatalog">The ModuleCatalog to configure</param>
        </member>
        <member name="M:Prism.PrismApplicationBase.InitializeModules">
            <summary>
            Initializes the modules.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.OnInitialized">
            <summary>
            Called when the PrismApplication has completed it's initialization process.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.OnResume">
            <summary>
            Application developers override this method to perform actions when the application
            resumes from a sleeping state
            </summary>
            <remarks>
            Be sure to call base.OnResume() or you will lose support for IApplicationLifecycleAware
            </remarks>
        </member>
        <member name="M:Prism.PrismApplicationBase.OnSleep">
            <summary>
            Application developers override this method to perform actions when the application
            enters the sleeping state
            </summary>
            <remarks>
            Be sure to call base.OnSleep() or you will lose support for IApplicationLifecycleAware
            </remarks>
        </member>
        <member name="T:Prism.PrismPlatform">
            <summary>
            Native helper class
            </summary>
        </member>
        <member name="M:Prism.PrismPlatform.OnBackPressed(Android.App.Activity)">
            <summary>
            Called when the Activity has detected the user's press of the back key
            </summary>
        </member>
        <member name="T:Prism.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DuplicatedModuleInCatalog">
            <summary>
              Looks up a localized string similar to A duplicated module with name {0} has been found in the ModuleCatalog..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ModuleNotFound">
            <summary>
              Looks up a localized string similar to Module {0} was not found in the catalog..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ModuleRefLocationNotSupported">
            <summary>
              Looks up a localized string similar to Module Reference Location is not supported in Xamarin.Forms.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.NavigationModeNotAvailable">
            <summary>
              Looks up a localized string similar to NavigationMode is not available.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ServiceProviderDidNotHaveIProvideValueTarget">
            <summary>
              Looks up a localized string similar to The ServiceProvider did not provide a &apos;IProvideValueTarget&apos;.
            </summary>
        </member>
        <member name="T:Prism.Services.DeviceService">
            <summary>
            A service that exposes device-specific information and actions
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.Flags">
            <summary>
            Gets a list of custom flags that were set on the device before Xamarin.Forms was initialized.
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.FlowDirection">
            <summary>
            Gets the flow direction on the device.
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.Idiom">
            <summary>
            Gets the kind of device that Xamarin.Forms is currently working on.
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.DeviceRuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on.  This is the native Device.RunTimePlatform property.
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.RuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on. The result is an enum of type RuntimePlatform.
            </summary>
        </member>
        <member name="M:Prism.Services.DeviceService.BeginInvokeOnMainThread(System.Action)">
            <summary>
            Invokes an action on the device main UI thread.
            </summary>
            <param name="action">The Action to invoke</param>
        </member>
        <member name="M:Prism.Services.DeviceService.GetMainThreadSynchronizationContextAsync">
            <summary>
            Returns the current SynchronizationContext from the main thread.
            </summary>
            <returns>The current SynchronizationContext from the main thread.</returns>
        </member>
        <member name="M:Prism.Services.DeviceService.InvokeOnMainThreadAsync(System.Action)">
            <summary>
            Invokes an Action on the device main (UI) thread.
            </summary>
            <param name="action">The Action to invoke</param>
            <returns>A task representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.DeviceService.InvokeOnMainThreadAsync``1(System.Func{``0})">
            <summary>
            Invokes a Func on the device main (UI) thread.
            </summary>
            <param name="func">The Func to invoke.</param>
            <typeparam name="T">The return type of the Func.</typeparam>
            <returns>A task of type T representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.DeviceService.InvokeOnMainThreadAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Invokes a Func on the device main (UI) thread.
            </summary>
            <param name="funcTask">The return type of the Func.</param>
            <typeparam name="T">The return type of the Func.</typeparam>
            <returns>A task of type T representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.DeviceService.InvokeOnMainThreadAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invokes a Func on the device main (UI) thread.
            </summary>
            <param name="funcTask">The Func to invoke.</param>
            <returns>A task representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.DeviceService.SetFlags(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Sets a list of custom flags on the device.
            </summary>
            <param name="flags">The list of custom flag values.</param>
        </member>
        <member name="M:Prism.Services.DeviceService.SetFlowDirection(Prism.AppModel.FlowDirection)">
            <summary>
            Sets the flow direction on the device.
            </summary>
            <param name="flowDirection">The new flow direction value to set.</param>
        </member>
        <member name="M:Prism.Services.DeviceService.StartTimer(System.TimeSpan,System.Func{System.Boolean})">
            <summary>
            Starts a recurring timer using the Device clock capabilities.
            </summary>
            <param name="interval">The interval between invocations of the callback </param>
            <param name="callBack">Action to run when the timer elapses</param>
        </member>
        <member name="T:Prism.Services.Dialogs.DialogService">
            <summary>
            Provides the ability to display dialogs from ViewModels.
            </summary>
        </member>
        <member name="F:Prism.Services.Dialogs.DialogService.PopupOverlayStyle">
            <summary>
            Gets the key for specifying or retrieving popup overlay style from Application Resources.
            </summary>
        </member>
        <member name="M:Prism.Services.Dialogs.DialogService.#ctor(Prism.Common.IApplicationProvider,Prism.Ioc.IContainerProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Services.Dialogs.DialogService"/> class.
            </summary>
            <param name="applicationProvider">An object that provides Application components.</param>
            <param name="containerProvider">An object that can resolve services.</param>
        </member>
        <member name="M:Prism.Services.Dialogs.DialogService.ShowDialog(System.String,Prism.Services.Dialogs.IDialogParameters,System.Action{Prism.Services.Dialogs.IDialogResult})">
            <inheritdoc/>
        </member>
        <member name="T:Prism.Services.Dialogs.IDialogParameters">
            <summary>
            Provides a way for the <see cref="T:Prism.Services.Dialogs.IDialogService"/> to pass parameters when displaying a dialog.
            </summary>
        </member>
        <member name="T:Prism.Services.Dialogs.IDialogService">
            <summary>
            Defines a contract for displaying dialogs from ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Services.Dialogs.IDialogService.ShowDialog(System.String,Prism.Services.Dialogs.IDialogParameters,System.Action{Prism.Services.Dialogs.IDialogResult})">
            <summary>
            Displays a dialog.
            </summary>
            <param name="name">The unique name of the dialog to display. Must match an entry in the <see cref="T:Prism.Ioc.IContainerRegistry"/>.</param>
            <param name="parameters">Parameters that the dialog can use for custom functionality.</param>
            <param name="callback">The action to be invoked upon successful or failed completion of displaying the dialog.</param>
            <example>
            This example shows how to display a dialog with two parameters.
            <code>
            var parameters = new DialogParameters
            {
                { "title", "Connection Lost!" },
                { "message", "We seem to have lost network connectivity" }
            };
            _dialogService.ShowDialog("DemoDialog", parameters, <paramref name="callback"/>: null);
            </code>
            </example>
        </member>
        <member name="T:Prism.Services.Dialogs.IDialogServiceExtensions">
            <summary>
            Common extensions for <see cref="T:Prism.Services.Dialogs.IDialogService"/>
            </summary>
        </member>
        <member name="M:Prism.Services.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Services.Dialogs.IDialogService,System.String)">
            <summary>
            Displays a dialog.
            </summary>
            <param name="dialogService">The dialog service.</param>
            <param name="name">The unique name of the dialog to display. Must match an entry in the <see cref="T:Prism.Ioc.IContainerRegistry"/>.</param>
        </member>
        <member name="M:Prism.Services.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Services.Dialogs.IDialogService,System.String,System.Action{Prism.Services.Dialogs.IDialogResult})">
            <summary>
            Displays a dialog.
            </summary>
            <param name="dialogService">The dialog service.</param>
            <param name="name">The unique name of the dialog to display. Must match an entry in the <see cref="T:Prism.Ioc.IContainerRegistry"/>.</param>
            <param name="callback">The action to be invoked upon successful or failed completion of displaying the dialog.</param>
        </member>
        <member name="M:Prism.Services.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Services.Dialogs.IDialogService,System.String,Prism.Services.Dialogs.IDialogParameters)">
            <summary>
            Displays a dialog.
            </summary>
            <param name="dialogService">The dialog service.</param>
            <param name="name">The unique name of the dialog to display. Must match an entry in the <see cref="T:Prism.Ioc.IContainerRegistry"/>.</param>
            <param name="parameters">Parameters that the dialog can use for custom functionality.</param>
        </member>
        <member name="M:Prism.Services.Dialogs.IDialogServiceExtensions.ShowDialogAsync(Prism.Services.Dialogs.IDialogService,System.String,Prism.Services.Dialogs.IDialogParameters)">
            <summary>
            Displays a dialog asynchronously.
            </summary>
            <param name="dialogService">The dialog service.</param>
            <param name="name">The unique name of the dialog to display. Must match an entry in the <see cref="T:Prism.Ioc.IContainerRegistry"/>.</param>
            <param name="parameters">Parameters that the dialog can use for custom functionality.</param>
            <returns><see cref="T:Prism.Services.Dialogs.IDialogResult"/> indicating whether the request was successful or if there was an encountered <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:Prism.Services.IDeviceService">
            <summary>
            A service that exposes device-specific information and actions
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.Flags">
            <summary>
            Gets a list of custom flags that were set on the device before Xamarin.Forms was initialized.
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.FlowDirection">
            <summary>
            Gets the flow direction on the device.
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.Idiom">
            <summary>
            Gets the kind of device that Xamarin.Forms is currently working on.
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.DeviceRuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on.  This is the native Device.RunTimePlatform property.
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.RuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on. The result is an enum of type RuntimePlatform.
            </summary>
        </member>
        <member name="M:Prism.Services.IDeviceService.BeginInvokeOnMainThread(System.Action)">
            <summary>
            Invokes an action on the device main UI thread.
            </summary>
            <param name="action">The Action to invoke</param>
        </member>
        <member name="M:Prism.Services.IDeviceService.GetMainThreadSynchronizationContextAsync">
            <summary>
            Returns the current SynchronizationContext from the main thread.
            </summary>
            <returns>The current SynchronizationContext from the main thread.</returns>
        </member>
        <member name="M:Prism.Services.IDeviceService.InvokeOnMainThreadAsync(System.Action)">
            <summary>
            Invokes an Action on the device main (UI) thread.
            </summary>
            <param name="action">The Action to invoke</param>
            <returns>A task representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.IDeviceService.InvokeOnMainThreadAsync``1(System.Func{``0})">
            <summary>
            Invokes a Func on the device main (UI) thread.
            </summary>
            <param name="func">The Func to invoke.</param>
            <typeparam name="T">The return type of the Func.</typeparam>
            <returns>A task of type T representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.IDeviceService.InvokeOnMainThreadAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Invokes a Func on the device main (UI) thread.
            </summary>
            <param name="funcTask">The return type of the Func.</param>
            <typeparam name="T">The return type of the Func.</typeparam>
            <returns>A task of type T representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.IDeviceService.InvokeOnMainThreadAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invokes a Func on the device main (UI) thread.
            </summary>
            <param name="funcTask">The Func to invoke.</param>
            <returns>A task representing the work to be performed</returns>
        </member>
        <member name="M:Prism.Services.IDeviceService.SetFlags(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Sets a list of custom flags on the device.
            </summary>
            <param name="flags">The list of custom flag values.</param>
        </member>
        <member name="M:Prism.Services.IDeviceService.SetFlowDirection(Prism.AppModel.FlowDirection)">
            <summary>
            Sets the flow direction on the device.
            </summary>
            <param name="flowDirection">The new flow direction value to set.</param>
        </member>
        <member name="M:Prism.Services.IDeviceService.StartTimer(System.TimeSpan,System.Func{System.Boolean})">
            <summary>
            Starts a recurring timer using the Device clock capabilities.
            </summary>
            <param name="interval">The interval between invocations of the callback </param>
            <param name="callBack">Action to run when the timer elapses</param>
        </member>
        <member name="T:Prism.Services.ActionSheetButton">
            <summary>
            Represents a button displayed in <see cref="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton.Action">
            <summary>
            Action to perform when the button is pressed
            </summary>
            <value>The action.</value>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.OnButtonPressed">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton(System.String)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the Action when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton(System.String)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the action when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the action when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="T:Prism.Services.ActionSheetButtonBase">
            <summary>
            ActionSheetButton Base class
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase._isCancel">
            <summary>
            Gets a value indicating whether this <see cref="T:Prism.Services.IActionSheetButton"/>
            is cancel.
            </summary>
            <value><c>true</c> if is cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase._isDestroy">
            <summary>
            Gets a value indicating whether this <see cref="T:Prism.Services.IActionSheetButton"/>
            is destroy.
            </summary>
            <value><c>true</c> if is destroy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase._text">
            <summary>
            The backing text for <see cref="T:Prism.Services.IActionSheetButton"/>
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.IsCancel">
            <summary>
            The button will be used as a Cancel Button
            </summary>
            <value><c>true</c> if is cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.IsDestroy">
            <summary>
            The button will be used as a Destroy Button
            </summary>
            <value><c>true</c> if is destroy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Text">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:Prism.Services.ActionSheetButtonBase.OnButtonPressed">
            <summary>
            Executes the action.
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#IsCancel">
            <inheritDoc />
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#IsDestroy">
            <inheritDoc />
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#Text">
            <inheritDoc />
        </member>
        <member name="M:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#PressButton">
            <inheritDoc />
        </member>
        <member name="T:Prism.Services.ActionSheetButton`1">
            <summary>
            Provides a Generic Implementation for IActionSheetButton
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton`1.Action">
            <summary>
            Generic Action to perform
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButton`1.Parameter">
            <summary>
            Typed Parameter
            </summary>
            <value>The parameter.</value>
        </member>
        <member name="M:Prism.Services.ActionSheetButton`1.OnButtonPressed">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
        </member>
        <member name="T:Prism.Services.IActionSheetButton">
            <summary>
            Convenient contract to enable executing commands directly when using <see cref="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.IsDestroy">
            <summary>
            The button will be used as destroy
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.IsCancel">
            <summary>
            The button will be used as cancel
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.Text">
            <summary>
            Text to display in the action sheet
            </summary>
        </member>
        <member name="M:Prism.Services.IActionSheetButton.PressButton">
            <summary>
            Presses the button.
            </summary>
        </member>
        <member name="T:Prism.Services.IPageDialogService">
            <summary>
            A service which provides access to the DisplayAlert and DisplayActionSheet off of the Xamarin.Forms.Page class.
            </summary>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlertAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlertAsync(System.String,System.String,System.String,System.String,Prism.AppModel.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlertAsync(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlertAsync(System.String,System.String,System.String,Prism.AppModel.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,System.String,System.String,Prism.AppModel.FlowDirection,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the callback action will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,Prism.AppModel.FlowDirection,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the callback action will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayPromptAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,Prism.AppModel.KeyboardType,System.String)">
            <summary>
            Displays a native platform prompt, allowing the application user to enter a string.
            </summary>
            <param name="title">Title to display</param>
            <param name="message">Message to display</param>
            <param name="accept">Text for the accept button</param>
            <param name="cancel">Text for the cancel button</param>
            <param name="placeholder">Placeholder text to display in the prompt</param>
            <param name="maxLength">Maximum length of the user response</param>
            <param name="keyboardType">Keyboard type to use for the user response</param>
            <param name="initialValue">Pre-defined response that will be displayed, and which can be edited</param>
            <returns><c>string</c> entered by the user. <c>null</c> if cancel is pressed</returns>
        </member>
        <member name="T:Prism.Services.PageDialogService">
            <summary>
            Implementation of the <see cref="T:Prism.Services.IPageDialogService"/>
            </summary>
        </member>
        <member name="P:Prism.Services.PageDialogService._applicationProvider">
            <summary>
            Gets the <see cref="T:Prism.Common.IApplicationProvider"/>.
            </summary>
        </member>
        <member name="P:Prism.Services.PageDialogService._keyboardMapper">
            <summary>
            Gets the <see cref="T:Prism.AppModel.IKeyboardMapper"/>.
            </summary>
        </member>
        <member name="M:Prism.Services.PageDialogService.#ctor(Prism.Common.IApplicationProvider,Prism.AppModel.IKeyboardMapper)">
            <summary>
            Creates a new <see cref="T:Prism.Services.IPageDialogService"/>
            </summary>
            <param name="applicationProvider">The <see cref="T:Prism.Common.IApplicationProvider"/>.</param>
            <param name="keyboardMapper">The <see cref="T:Prism.AppModel.IKeyboardMapper"/>.</param>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlertAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlertAsync(System.String,System.String,System.String,System.String,Prism.AppModel.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlertAsync(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlertAsync(System.String,System.String,System.String,Prism.AppModel.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheetAsync(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheetAsync(System.String,System.String,System.String,Prism.AppModel.FlowDirection,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the <see cref="T:System.Windows.Input.ICommand"/> or <see cref="T:System.Action"/> will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheetAsync(System.String,Prism.AppModel.FlowDirection,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the callback action will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayPromptAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,Prism.AppModel.KeyboardType,System.String)">
            <summary>
            Displays a native platform prompt, allowing the application user to enter a string.
            </summary>
            <param name="title">Title to display</param>
            <param name="message">Message to display</param>
            <param name="accept">Text for the accept button</param>
            <param name="cancel">Text for the cancel button</param>
            <param name="placeholder">Placeholder text to display in the prompt</param>
            <param name="maxLength">Maximum length of the user response</param>
            <param name="keyboardType">Keyboard type to use for the user response</param>
            <param name="initialValue">Pre-defined response that will be displayed, and which can be edited</param>
            <returns><c>string</c> entered by the user. <c>null</c> if cancel is pressed</returns>
        </member>
        <member name="T:Prism.Xaml.ParameterExtension">
            <summary>
            XAML Extension for INavigation and IDialog parameters
            </summary>
        </member>
        <member name="M:Prism.Xaml.ParameterExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Method to retrieve value for parameter
            </summary>
            <param name="serviceProvider">The service that supplies the parameters value</param>
            <returns>The instance of the ParameterExtension class</returns>
        </member>
        <member name="M:Prism.Xaml.ParameterExtension.Xamarin#Forms#Xaml#IMarkupExtension#ProvideValue(System.IServiceProvider)">
            <summary>
            Method to retrieve value for parameter
            </summary>
            <param name="serviceProvider">The service that supplies the parameters value</param>
            <returns>The return value from <see cref="M:Prism.Xaml.ParameterExtension.ProvideValue(System.IServiceProvider)"/></returns>
        </member>
        <member name="P:Prism.Xaml.Parameters.Parent">
            <summary>
                Navigation Parameter Parent. This is a bindable property.
            </summary>
            <remarks>This is used to set the BindingContext of the CommandParameters to the BindingContext of it's parent.</remarks>
        </member>
        <member name="T:Prism.Xaml.ParentPageAwareExtension`1">
            <summary>
            Provides a base implementation of <see cref="T:Xamarin.Forms.Xaml.IMarkupExtension`1" /> that locates the parent <see cref="T:Xamarin.Forms.Page" />
            </summary>
            <typeparam name="T">The generic type the extension will return.</typeparam>
        </member>
        <member name="P:Prism.Xaml.ParentPageAwareExtension`1.TargetElement">
            <summary>
            The target element the XAML Extension is being used on.
            </summary>
        </member>
        <member name="P:Prism.Xaml.ParentPageAwareExtension`1.TargetBindingContext">
            <summary>
            Sets the Target BindingContext strategy
            </summary>
        </member>
        <member name="P:Prism.Xaml.ParentPageAwareExtension`1.SourcePage">
            <summary>
            The parent Page of the layout where the XAML Extension is being used.
            </summary>
        </member>
        <member name="M:Prism.Xaml.ParentPageAwareExtension`1.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides the object that is created from the markup extension.
            </summary>
            <param name="serviceProvider">The Service Provider</param>
            <returns>The object created by the markup extension.</returns>
        </member>
        <member name="M:Prism.Xaml.ParentPageAwareExtension`1.ProvideValue">
            <summary>
            Provides the object that is created from the markup extension.
            </summary>
            <returns>The object created by the markup extension.</returns>
        </member>
        <member name="M:Prism.Xaml.ParentPageAwareExtension`1.OnTargetElementChanged">
            <summary>
            Callback when the TargetElement is changed
            </summary>
        </member>
        <member name="T:Prism.Xaml.TargetBindingContext">
            <summary>
            Target BindingContext behavior for the <see cref="T:Prism.Xaml.ParentPageAwareExtension`1" />
            </summary>
        </member>
        <member name="F:Prism.Xaml.TargetBindingContext.Element">
            <summary>
            Use the Target Element's Binding Context
            </summary>
        </member>
        <member name="F:Prism.Xaml.TargetBindingContext.Page">
            <summary>
            Use the Parent Page's Binding Context (usually the ViewModel)
            </summary>
        </member>
    </members>
</doc>
